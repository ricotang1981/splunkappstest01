# Copyright (C) 2010-2019 Sideview LLC.  All Rights Reserved.

[module]
className = Multiplexer
requiresDownstreamModules = True


description = This is a mindbending module.  You give it a "field" param.  You give it some downstream module config, like maybe a single HTML module, or maybe a Pager + Table with an HTML header. It will look at the search result rows, and look at the values for the given field in each row.   It will then create one cloned copy of the *entire* downstream module config,  for each of the search result rows.   Furthermore the $foo$ token matching your "field" param will be set to the corresponding value within that cloned module config.  When used with a single HTML module downstream it acts as an extremely powerful event renderer.   When used with more complex config... it will make your head explode.  Note that while it works with JSChart, some bugs have been reported there, and it does not work with FlashChart at all. 

[param:field]
required = False
label = DEPRECATED. Replaced by fields param.  This determines what single field the module will pull out of the job. was deprecated when the fields param was introduced and the module gained the ability to deal with more than one field at a time.

[param:fields]
required = False
label = This determines what field or fields the module will pull out of the search result rows.  multiple fields are comma-separated.

[param:customBehavior]
required = False
label = You can define custom behaviors by using Sideview.utils.declareCustomBehavior(behaviorName, callback); See the general comments about what this all means in the CustomBehavior module.

[param:maxRows]
required = False
default = 400
label = You would generally leave this unset.  This will only apply to Multiplexers that are not paged (by a Pager module), and it determines the maximum number of rows that will be Multiplexed.

[param:hideChildrenOnload]
required = False
default = True
label = There's no reason to ever override this, but this is how Layer (and other modules can do this too) specifies to the framework that all its downstream modules should begin life hidden.
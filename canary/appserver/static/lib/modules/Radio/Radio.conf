# Copyright (C) 2010-2019 Sideview LLC.  All Rights Reserved.

[module]
className = Radio
requiresDownstreamModules = True


description = This module is very similar to the Checkboxes, Pulldown, and Tabs modules.   You can set zero or more statically defined radio buttons, where the values and labels are set in the XML.  In addition you can set zero or more "dynamic" radio buttons, meaning that their values and labels are pulled from the current search result rows.  Aside from that it works just like the Pulldown module so if you're looking for details documentation start with the Pulldown docs in the Sideview Utils app itself.


[param:valueField]
required = False
label = When configuring a Radio module to render some or all of its buttons using the results of a search, this param specifies the field to use for the value of the radio buttons. Note that you can use "$name$" as the value if you want to refer automatically to the value of the "name" param.

[param:labelField]
required = False
label = When configuring a Radio module to render some or all of its buttons using the results of a search, this param specifies the field to use for the label of the buttons. This param can be omitted, in which case the valueField will be used.

[param:staticRadios]
required = False
label = If left blank, there will be no static radio buttons.

[param:name]
required = True
label = If this is set to 'user', then downstream modules will be able to use $user$ and $user.label$ in searches and headers.  To get the array value itself, for instance to use Redirector and prepopulate a control in the target view with this value, you would use $user.rawValue$.

[param:postProcess]
required = False
label = This denotes any postProcess search that should be run against the current results when the module requests its data (to create the dynamic radio buttons). Use $postProcess$ in the value to refer to any postProcess value that may have been provided from upstream modules. Use $name$ to refer to the value entered for the 'name' param. Very commonly, this param will have a value like "dedup $name$ | sort $name$"

[param:requiredFields]
required = False
label = If there are fields needed in the search used to render the dynamic radio buttons they will need to be specified here or splunk might not extract and summarize them.  If left blank there is an implicit default that amounts to the field names used for 'valueField' and 'labelField'.

[param:template]
required = False
label = This allows you to wrap the values in other text.  For example: given a name param of 'user', <param name="template">$name$="$value$"</param> will turn the module's effective output into user="bob".  Any backslashes in the actual $value$ will get backslash-escaped but the rest of the template string WILL NOT.  

[param:customBehavior]
required = False
label = You can define custom behaviors by using Sideview.declareCustomBehavior(behaviorName, callback). See the general comments about what this all means in the CustomBehavior module.

[param:layout]
required = False
default = horizontal
values = horizontal,vertical
label = This allows you to have the radio buttons appear alongside eachother left to right, wrapping as necessary (horizontal),  or to have each radio button and label appear on its own line (vertical)

[param:cssClass]
required = False
label = When present, this value will be used as the CSS class on the given module. 

[param:count]
required = False
default = 50
label = This sets a limit on the number of dynamic radio buttons that the module is allowed to render from search results.

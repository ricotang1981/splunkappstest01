# Copyright (C) 2010-2019 Sideview LLC.  All Rights Reserved.

[module]
className = CheckboxPulldown
requiresDownstreamModules = True

description = This is designed to be a select pulldown that can either pull its values from a search or from a statically defined list.   When configured dynamically the module gets its data just like any other data-rendering module.  Think of it a drilldown-enabled Table module that happens to look like a pulldown and it'll make sense. Make sure to read all of the pages of documentation and working examples within the Sideview Utils app for many more key details.  

[param:label]
required = False
label = This gives the module a label just to the left of the pulldown. Optional. NOTE: If the label begins and ends with "$" characters, ie "$foo$", then it will be set from a corresponding variable in the URL. If that variable is absent, the label will be empty.  If "$" characters are present in any other configuration besides the first character and last character, the substitution will not work at all.
translate = string

[param:valueField]
required = False
label = When configuring a Pulldown to render it's option elements using the results of a search, this param specifies the field to use for the value of the option.  Note that you can use "$name$" as the value if you want to refer automatically to the value of the "name" param.

[param:labelField]
required = False
label = When configuring a Pulldown to render it's option elements using the results of a search, this param specifies the field to use for the label of the option.  This param can be omitted, in which case the valueField will be used.

[param:staticOptions]
required = False
label = If left blank, the module will use an IMPLICIT default of "All" as the label and "*" as the value.  By implicit I mean that the default is NOT reflected in the conf file but is wired into the code. 

[param:name]
required = False
default = selection
label = If this is set to 'user', then downstream modules will be able to use $user.value$ and $user.label$ in searches and headers, and javascript can use context.get("user.element") to get the actual <option> element.  Likewise, if the un-templated version of the value is required, use $user.rawValue$ (see the 'template' param).

[param:postProcess]
required = False
label = This denotes any postProcess search that should be run against the current results when the module requests its data (to fill its options).  Use $postProcess$ in the value to refer to any postProcess value that may have been provided from upstream modules. Use $name$ to refer to the value entered for the 'name' param. Very commonly, this param will have a value of "$postProcess$ | dedup $name$ | sort $name$"

[param:separator]
required = False
default  = +OR+
label = Only valid if you're using multiple selection.  When the module is configured to allow multiple selection, this string is used to glue together the N selected values when you are in a multiple selection config. Note that because of a bug in Splunk where leading and trailing space is trimmed from param values, you have to type "+" if you want leading or trailing spaces in the value.  

[param:outerTemplate]
required = False
default = ( $value$ )
label = This is only valid if you're using multiple selection.  When the module is configured to allow multiple selection, and after the module has glued together all the N selected values using the 'separator' param, this template is used to append and prepend other values to the combined value.  In this case $value$ is used to refer to the conglomerate value, ie the multiple values that have been glued together by the separator param. Commonly, this is set to "( $value$ )". See comments under the 'separator' param about leading/trailing whitespace and the use of the "+" character.

[param:customBehavior]
required = False
label = You can define custom behaviors by using Sideview.utils.declareCustomBehavior(behaviorName, callback). See the general comments about what this all means in the CustomBehavior module.

[param:cssClass]
required = False
label = When present, this value will be used as the CSS class on the given module. 

[param:float]
required = False
label = You can set this to left or right and it will float the module accordingly.  Refer to "css float" in google for more information.

[param:clear]
required = False
label = This allows you to clear floating behavior that modules above might have been given.

[param:template]
required = False
label = This allows you to wrap the values in other text.  For example: given a name param of 'user', <param name="template">$name$="$value$"</param> will turn the module's effective output into user="bob".  Any backslashes in the actual $value$ will get backslash-escaped but the rest of the template string WILL NOT.  

[param:nullTemplate]
required = False
label = If present, this defines how a null or emptystring value should be templated.  If template is $name$="$value$" this might for instance be NOT $name$="*".   If this is left blank then the module will be unable to do anything meaningful with null options so they will trigger an error. 

[param:count]
required = False
default = 5000
label = This sets a limit on the number of dynamic <option> elements that the pulldown is allowed to retrieve from search results.

[param:width]
required = False
label = This allows you to set the width of the select element, in pixels or percent or em's or whatever works for you.  If left blank the element will have no width CSS set at all, except that which might apply from external css files like application.css.

[param:selectedByDefault]
required = False
default = True
values=True,False
label = Set this to False if you would like the module to not automatically load options selected. Otherwise, ie if you prefer the default behavior where options are by default selected on load,  omit this param entirely. NOTE: If you set any "selected" flags on your staticFields param,   then those staticFields values will be selected, and any without the flag will be unselected.  If you omit all "selected" flags, then this global param will be used to determine whether all should load selected or all unselected. 

[param:selectAllOptimization]
required = False
default = False
values = False,*,omit
label = Set this to "*" or "omit" if you would like the module to have special behavior when the user has all checkboxes checked.  Setting this to "*" will make the module behave as though only a single option with value "*" is selected.  This value will of course be templated through the "template" param if one is present.  Setting this to "omit" on the other hand will result in an empty $foo$ token (and the template param will be disregarded if present).  NOTE: both optimizations will only ever be applied if there are also 2 or more checkboxes present.  Or put the other way, if there is only a single checkbox in the control,  even if this param is set to use one of the optimizations, the module will ignore the optimization param and behave as though it was not present.

[param:hideOnEmpty]
required = False
default = False
values = True,False
label = Set this to True if you want the module to have the following special behavior when it finds itself with a completely empty option list.  a) Hide itself from the UI and take up no space there.   b) emit no $foo$ tokens whatsoever downstream.
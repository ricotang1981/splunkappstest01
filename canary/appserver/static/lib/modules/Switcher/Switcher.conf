# Copyright (C) 2010-2019 Sideview LLC.  All Rights Reserved.

[module]
className = Switcher
requiresDownstreamModules = True


description = This module keeps an eye on the value of a single context key that is specified in its "name" param. Whenever the module gets new data from upstream, it will check the value of that key.   It will then iterate through all the downstream modules, showing the modules whose "group" attribute matches the value and hiding the modules whose "group" attribute does NOT match the value.   Note that more than one sub-branch can have the same group name, in which case all matching sub-branches will be shown.   Note also that modules that have no group param will never be shown/hidden.  And if the module looks in the upstream data and sees no value at all for the configured name, it will restore the visibility of any modules previously hidden.


[param:requiresDispatch]
required = False
default = False
label = When set to True, the module will trigger automatic search dispatches from the module framework, just as though it was a SimpleResultsTable or a header or a chart.
values = True,False

[param:selectedGroup]
required = True
label = Generally containing one or more $foo$ tokens which will be filled with values coming from upstream, this value tells the module which subtree(s) of modules to make visible and active.  Any $foo$ substitutions in the param are calculated, and the final value is compared to the "group" attributes of the module subtrees.

[param:hideChildrenOnload]
required = False
default = True
label = There's no reason to ever override this, but this is how Switcher (and other modules can do this too) specifies to the framework that all its downstream modules should begin life hidden.

[param:customBehavior]
required = False
label = You can define custom behaviors by using Sideview.declareCustomBehavior(behaviorName, callback). See the general comments about what this all means in the CustomBehavior module.


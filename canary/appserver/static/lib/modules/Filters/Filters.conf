# Copyright (C) 2010-2019 Sideview LLC.  All Rights Reserved.

[module]
className = Filters

description = This module creates a little breadcrumb bar that is initially empty.  Other modules, typically via customBehavior, can send filters upstream to this module via two methods.  A "filter" in this sense is a Sideview construct and it is at base a list of dictionaries, each of which generally has a "field" and a "value" property. They may also  have an optional "operator" property.   The first method of sending a filter upstream is to put it into an empty context as the same key name as the Filters module's name property, and send up via this.passContextToParent().   The second method is quite different, and that is to use the bound method callback that Filters module provides downstream, $<filterName>.addNewFilter$.


[param:name]
required = False
default = filters
label = Like all Sideview modules that pass keys downstream primarily to be plugged into searches, the "name" param determines the foo of its $foo$ token. 

[param:labelTemplate]
required = False
default = $negation$ $field$$operator$$value$
label = This allows you to control how active filters should be rendered to the user. 

[param:customBehavior]
required = False
label = You can define custom behaviors by using Sideview.utils.declareCustomBehavior(behaviorName, callback); See the general comments about what this all means in the CustomBehavior module.

[param:cssClass]
required = False
label = When present, this value will be used as the CSS class on the given module. 

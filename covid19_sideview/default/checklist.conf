[critical_check_for_reindexed_data]
title = Make sure none of the events have been indexed twice
category = Data Indexing
tags = configuration, indexing
description = This makes sure the same _raw values have never been indexed twice.
failure_text = Somehow some events have been indexed twice.  The most likely cause is that you have updated the app AND the CSSE data has changed for some older data points you already had, and this made Splunk reindex.
suggested_action = Unfortunately to fix this you will have to clean the "covid19" index.  Assuming you're an admin, you would run this very carefully from the command line<br>splunk stop && splunk clean eventdata -index covid19 && splunk start
search = `covid_19_all_data` | `ignore_old_duplicate_reports` \
| stats values(_time) as time values(_indextime) as indextime values(source) as source count by _raw \
| where count>1 \
| stats count  \
| eval severity_level=if (count>0,2,0)  \
| eval metric=if (count>0, "some events have been indexed twice. You will have to shutdown splunk and clean the 'covid19' index.  From the command line run &gt; splunk stop && splunk clean eventdata -index covid19 && splunk start", "OK - no events have been indexed twice") \
 | eval instance="all" \


[critical_required_version_of_app_dependency]
title = Check whether any apps require a second app that is either absent, or that has too old a version installed.
category = Splunk Miscellaneous
tags = configuration, installation
description = This looks for apps whose app.conf files follow the Sideview convention of having a stanza called "dependency:app:SOMEAPP" with SOMEAPP being set to some specific app that is required.  Where that stanza also has =a key called "requiredVersion" set to the minimum required version of the second app needed by the main app.
failure_text=This app has the given app as a dependency and the version of that app installed is too old.
suggested_action = Either upgrade the other app to the given version or newer, or disable or uninstall this given app.

search = | rest /servicesNS/-/-/configs/conf-app splunk_server=local | where match(title,"dependency:app") or isnotnull(version) \
| rename "eai:acl.app" as app \
| eval appWithDependency=if(match(title,"dependency.app:*"),app,null()) \
| eval app=case(match(title,"dependency.app:*"),replace(title,"dependency.app:",""),isnotnull(version),app) \
| eventstats last(version) as hasVersion by app \
| append  [| rest /services/server/info splunk_server=local | rename serverName as instance_name | fields instance_name  ] \
| eventstats last(instance_name) as instance_name \
| search requiredVersion=* hasVersion=* \
| fields instance_name appWithDependency app requiredVersion hasVersion \
| eval has=split(hasVersion,".")  \
| eval req=split(requiredVersion,".") \
| eval req_weighted = 1000000000 * tonumber(mvindex(req,0)) + if(mvcount(req)>1,1000000 * tonumber(mvindex(req,1)),0) + if(mvcount(req)>2,1000 * tonumber(mvindex(req,2)),0)  + if(mvcount(req)>3,1 * tonumber(mvindex(req,3)),0) \
| eval has_weighted = 1000000000 * tonumber(mvindex(has,0)) + if(mvcount(has)>1,1000000 * tonumber(mvindex(has,1)),0) + if(mvcount(has)>2,1000 * tonumber(mvindex(has,2)),0)  + if(mvcount(has)>3,1 * tonumber(mvindex(has,3)),0) \
| eval metric=if(has_weighted<req_weighted, \
    "ERROR - " . appWithDependency + " app needs at least version " + requiredVersion + " of " + app + " installed.", \
    "OK - You do not need to download and install a newer version of " + app + ".") \
| eval severity_level=if(has_weighted<req_weighted,3,0) \
| fields instance_name metric severity_level appWithDependency app requiredVersion hasVersion

[info_required_splunk_version]
title = Check whether any apps require a newer version of Splunk.
category = Splunk Miscellaneous
tags = configuration, installation
description = This looks for apps whose app.conf files follow the Sideview convention of having a stanza called "dependency:splunk" with a key called "requiredVersion" set to the minimum required version of Splunk needed by that app.
failure_text=This app requires a newer version of Splunk Enterprise.
suggested_action = Either upgrade Splunk to the given version or newer, or disable or uninstall the app.

search = | rest /servicesNS/-/-/configs/conf-app splunk_server=local | eval requiredSplunkVersion=if(match(title,"dependency:splunk"),requiredVersion,null()) \
| rename eai:acl.app as app \
| fields app title label requiredSplunkVersion version requiredVersion * \
| stats last(requiredSplunkVersion) as requiredSplunkVersion last(label) as label last(version) as version last(build) as build by app \
| append [ \
    |  rest services/server/info splunk_server=local | rename version as hasSplunkVersion serverName as instance_name | table hasSplunkVersion instance_name \
] \
| eventstats last(hasSplunkVersion) as hasSplunkVersion last(instance_name) as instance_name \
| search requiredSplunkVersion=* hasSplunkVersion=* \
| eval has=split(hasSplunkVersion,".") \
| eval req=split(requiredSplunkVersion,".") \
| eval req_weighted = 1000000000 * tonumber(mvindex(req,0)) + if(mvcount(req)>1,1000000 * tonumber(mvindex(req,1)),0) + if(mvcount(req)>2,1000 * tonumber(mvindex(req,2)),0)  + if(mvcount(req)>3,1 * tonumber(mvindex(req,3)),0) \
| eval has_weighted = 1000000000 * tonumber(mvindex(has,0)) + if(mvcount(has)>1,1000000 * tonumber(mvindex(has,1)),0) + if(mvcount(has)>2,1000 * tonumber(mvindex(has,2)),0)  + if(mvcount(has)>3,1 * tonumber(mvindex(has,3)),0) \
| eval metric=if(has_weighted<req_weighted,"WARNING - The " + app + " app requires at least version " + requiredSplunkVersion + " to work correctly.  Currently you are running Splunk " + hasSplunkVersion, \
    "OK - The version of Splunk Enterprise you are running is new enough for the app") \
| eval severity_level=if(has_weighted<req_weighted,2,0) \
| fields instance_name metric severity_level *

drilldown = | rest /servicesNS/-/-/configs/conf-app splunk_server=local | eval requiredSplunkVersion=if(match(title,"dependency:splunk"),requiredVersion,null()) \
| rename eai:acl.app as app | fields app title label requiredSplunkVersion version requiredVersion * \
| stats last(requiredSplunkVersion) as requiredSplunkVersion last(label) as label last(version) as version last(build) as build by app \
| append [ \
    |  rest services/server/info splunk_server=local | rename version as hasSplunkVersion serverName as instance_name | table hasSplunkVersion instance_name \
] \
| eventstats last(hasSplunkVersion) as hasSplunkVersion last(instance_name) as instance_name \
| search requiredSplunkVersion=* hasSplunkVersion=* \
| eval has=split(hasSplunkVersion,".") \
| eval req=split(requiredSplunkVersion,".") \
| eval req_weighted = 1000000000 * tonumber(mvindex(req,0)) + if(mvcount(req)>1,1000000 * tonumber(mvindex(req,1)),0) + if(mvcount(req)>2,1000 * tonumber(mvindex(req,2)),0)  + if(mvcount(req)>3,1 * tonumber(mvindex(req,3)),0) \
| eval has_weighted = 1000000000 * tonumber(mvindex(has,0)) + if(mvcount(has)>1,1000000 * tonumber(mvindex(has,1)),0) + if(mvcount(has)>2,1000 * tonumber(mvindex(has,2)),0)  + if(mvcount(has)>3,1 * tonumber(mvindex(has,3)),0) \
| eval metric=if(has_weighted<req_weighted,"WARNING - The " + app + " app requires at least version " + requiredSplunkVersion + " to work correctly.  Currently you are running Splunk " + hasSplunkVersion, \
    "OK - The version of Splunk Enterprise you are running is new enough for the app") \
| eval severity_level=if(has_weighted<req_weighted,3 ,0) \
| eval"App Version and Build" = app . ": " . version . " (build " . build . ")" | rename requiredSplunkVersion AS "Requires Splunk Version" | rename hasSplunkVersion AS "Has Splunk Version" \
| fields instance_name metric severity_level label "App Version and Build", "Requires Splunk Version", "Has Splunk Version"


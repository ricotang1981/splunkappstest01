# Copyright (C) 2010-2018 Sideview LLC.  All Rights Reserved.

[module]
className = Splunk.Module.Table
superClass = Splunk.Module.DispatchingModule


description = This module is designed to replace the Splunk SimpleResultsTable module. Configuration is a bit simpler than the SRT module and the feature set is vastly more powerful.  There are too many benefits to attempt even a summary here.  Consult the documentation pages about the Table module, in the app itself. 


[param:customBehavior]
required = False
label = You can define custom behaviors by using Sideview.utils.declareCustomBehavior(behaviorName, callback); See the general comments about what this all means in the CustomBehavior module.

[param:cssClass]
required = False
label = When present, this value will be used as the CSS class on the given module. 

[param:count]
required = False
label = This determines the number of rows to display per page.  If the module finds itself downstream from a module such as Count, that sends down $results.count$,  then that value will override any default param specified here.   
default = 10

[param:name]
required = False
label = This determines the "row" in "$row.fields.myFieldName$" that you use in drilldown configurations.  For example set it to "selectedUserRow" and then you will refer to these clicked values downstream as "$selectedUserRow.fields.userName$"   and "$selectedUserRow.fields.extension$"
default = row

[param:default.*]
required = False
label = If no default param values are set, left the Table will hide its downstream children on page load and until the user interacts with the Table to select a row.  On the other hand if one or more default params are set to any non-null value,  the Table will NOT hide its downstream children, and it will provide to those downstream children values as though there was a selected row and as though the specified fields were set to the specified default values in that row.

[param:selectedIndex]
required = False
default = -1
label = if set to 0 or to a positive integer, and a rendered row exists at that index, that row will be highlighted as the selected row, the Table will not block downstream pushes, and $row.fields.FIELDNAME$ tokens matching that row's values will be provided downstream.  NOTE: this only supports selecting rows that are present on the first page.

[param:fields]
required = False
label = When present this determines the fields we want to be rendered in our table. field names not in this list will not be displayed although they might be available for drilldown logic.  If left blank the module will simply display all the fields in the search results, less whatever fields might be listed in the "hiddenFields" param.   It's common to think you need this param more often than you really do. Consider using the fields command in your search,  and/or using the hiddenFields param.  

[param:hiddenFields]
required = False
label = when present, these named fields will be retrieved but hidden.  If the user clicks a row in the rendered table, the values of these fields will be available downstream as though they were visible.  This param is commonly used for id fields where the user doesn't care about the actual ID, yet the ID is crucial for drilldown links and drilldown searches.   When i doubt as to whether you want to use this field or use the "fields" param, generally use this one. 

[param:rowClass]
required = False
label = When set, each row in the table will receive the value as a CSS class.   If the value contains $foo$ tokens, they will be substituted with values from upstream at render time.   If the value contains values of the form "$row.fields.fieldName$", and there is a field called "fieldName" visible in the row,  or a field called "fieldName" configured as one of the "hiddenFields",  then the given field value will be included.    For example if you had a field in your results called "severity", whose values were "low" and "high",   then you could set this param to "$row.fields.severity$".  Then each row in the table would get class="low" or class="high", depending on the row's severity value.   Note that the app developer or dashboard developer is still responsible for ensuring that there is some custom CSS in the app that defines how these CSS classes should be rendered.


[param:rowStyle]
required = False
label = when set,  each row in the table will be given the value as an inline CSS style.  Otherwise this works just like the rowClass param.

[param:columns.*]
required = False
label = when a value like "columns.fieldName.class" is set,  and say it's set to a value like "red",  then all of the cells in the "fieldName" column will get a className of 'red'.  Other visible fields from the row, or hidden fields from the row can be referenced using $foo$ tokens,  and all in all it works much like "rowClass", but instead applying to all of the td elements in the given column.   You can also set "columns.fieldName.style", and this work much like rowStyle.   If you set anything besides columns.*.class or columns.*.style, this is a misconfiguration and you will get an error at runtime.   More tokens may be supported in future releases.

[param:earliestTimeField]
required = False
default = _time

[param:latestTimeField]
required = False

[param:durationField]
required = False
default = _span

[param:timeFormat]
required = False
label = If this is set explicitly, then that exact timeformat string will be used.   However in almost all cases you should not set this.  When left unset,  in en-US locales the timeformat used will have the month before the day - "%m/%d/%y %H:%M:%S.%Q",  and in all other locales the timeformat used will use the non-US standard of day-month-year - "%d/%m/%y %H:%M:%S.%Q" 

[param:allowSorting]
required = False
default = True
values = True,False
label = If set to False, the table column headers will not be rendered with the little sorting arrows, and when a user clicks the table column header, no sorting will occur.  If set to True which is the default, then all fields shall remain sortable.   

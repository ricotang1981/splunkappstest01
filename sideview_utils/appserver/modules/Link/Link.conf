# Copyright (C) 2010-2018 Sideview LLC.  All Rights Reserved.

[module]
className = Splunk.Module.Link
superClass = Splunk.Module.DispatchingModule

description = This makes a little Link, and except for its appearance it is very similar to the Button module.  When clicked it pushes context to its downstream modules.  However, it's also got all the bells and whistles of the HTML module, whereby it can incorporate field values like $results[0].fieldName$.

[param:label]
required = True
label = This determines the text of the link.
translate = string

[param:allowSoftSubmit]
required = False
default = False
label = Short version - do not set this param.  Only in very rare cases should you even think about it. The default value is False, meaning that pushes coming down from upstream modules will be stopped at the Link.  Since the module most commonly downstream from a Link is a Redirector, we do not want to blithely pass pushes on downstream.    However in some complex cases where a Link module is being used in an inline drilldown scenario as a kind of "reload this visualization" link, then it *can* make sense to set allowSoftSubmit to True.

[param:loadingText]
required = False
default = (Loading...)
label = This specifies the text that the module should display while dynamic values are loading from the server.  NOTE: this param will do $foo$ substitution, so you can say "(Loading $selectedEntity$)"
translate = string

[param:maxRows]
required = False
default = 10
label = DON'T SET THIS unless you really know what you're doing. Link won't let configurations pull down more than this number of rows.   If you really want to raise this number a little you can, but be careful.  Don't set it to anything big because the browser will have to pull down a lot of json. Instead use the search language to rearrange your data into a more compact form with a smaller number of rows.


[param:allowAutoSubmit]
required = False
default = False
label = Short version - do not set this param.  Only in very rare cases should you even think about it. The default is False, meaning that when the page loads initially, the first push coming down through the modules will be halted at the Link module.   Since the module most commonly found downstream from a Link is a Redirector, this is a good thing.   If a push hits a Redirector after all, we will redirect.   If such things happen on page load,  well that's extremely silly.  Nonetheless, there are scenarios that involve using Link in the absence of Redirector, where you want to set allowAutoSubmit to True.

#[param:imgSrc]
#required = False
#label = as an alternate to 'label', this specifies the location of an image to use.


[param:cssClass]
required = False
label = When present, this value will be used as the CSS class on the given module. 


[param:linkClass]
required = False
label = Set this if you want to add a color or a CSS class to the link element itself within the Link module. 


[param:linkStyle]
required = False
label = Set this if you want to modify the CSS style of the link tag itself and you DO NOT want to use custom CSS. If you're using this a lot you should consider using custom CSS, and if you are also using Custom CSS then... use cssClass and your customCSS to do this.  Cause, er, embedding styles in the xml gets you negative fancypants points.  eg: set this to     font-size:28px;   


[param:customBehavior]
required = False
label = You can define custom behaviors by using Sideview.utils.declareCustomBehavior(behaviorName, callback). See the general comments about what this all means in the CustomBehavior module.

[param:hideUntilPushReceived]
required = False
default = True
values = True,False
label = This means that by default the module will not make its link visible until a push is received from above.  Set to False if you need the Link to be visible when the page is loaded regardless of whether the module has received any upstream data.

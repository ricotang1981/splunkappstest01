# Copyright (C) 2010-2018 Sideview LLC.  All Rights Reserved.

[module]
className = Splunk.Module.HTML
superClass =  Splunk.Module.DispatchingModule

description = This module allows the developer to put arbitrary HTML into the view. And anywhere within that HTML it can render the values of any $foo$ tokens that might have been provided by modules upstream from itself.  The short version is that you should use this module anywhere you want to display a header to the user, or anywhere you might have once used a 'SingleValue' module.   Advanced Note: if there is a $foo$ token in the config, and there is a ?foo=mildred in the URL, the mildred value will be replaced in the initial HTML before the Javascript is even running and thus before your URLLoader loads it. This is a convenience followed to prevent flashing as the $foo$ tokens appear briefly and are then replaced in target views. Note also that this module can grab values from the SEARCH RESULTS; just include $search[0].yourFieldName$.  However make sure to read all of the pages of documentation and working examples within Sideview Utils app for all of the key details.  THIS IS NOT "THE DOCUMENTATION".  The Documentation is the many pages of documentation and working examples that live in the Sideview Utils app itself.  Navigate to the Sideview Utils app from the app menu in the Splunk UI.

[param:customBehavior]
required = False
label = You can define custom behaviors by using Sideview.utils.declareCustomBehavior(behaviorName, callback). See the general comments about what this all means in the CustomBehavior module.

[param:cssClass]
required = False
label = When present, this value will be used as the CSS class on the given module. 

[param:html]
required = False
label = Set this to the explicit HTML that you want to appear in the view. You might want to CDATA the value, but you dont have to. Embed anything like $foo$ or $click.value$ in this token if you want the dynamic values from upstream modules to appear within the HTML.  Note that you either set this param, OR you set the 'src' param.

[param:src]
required = False
label = Set this to a filename within the /appserver/static directory of your app to load the HTML content from that external file.  Make sure that the HTML within that file is well-formed; the module does no checking here and you can get yourself into trouble if you're not careful.

[param:loadingText]
required = False
default = (Loading...)
label = This specifies the text that the module should display while dynamic values are loading from the server.  NOTE: this param will do $foo$ substitution, so you can say "Loading values for $selectedEntity$..."
translate = string

[param:maxRows]
required = False
default = 10
label = DON'T SET THIS unless you really know what you're doing. HTML won't let configurations pull down more than this number of rows.   If you really want to raise this number a little you can, but be careful.  Don't set it to anything big because the browser will have to pull down a lot of json. Instead use the search language to rearrange your data into a more compact form with a smaller number of rows.

[param:urlEncodeKeys]
required = False
label = set this to the raw key names (do not include the "$" characters), of any UI keys that you wish to urlEncode before substituting into the HTML.   If you need to use BOTH the encoded and the unencoded version of the keys, use a ValueSetter instead. See ValueSetter docs and examples for further details.

[param:htmlEscapeKeys]
required = False
label = set this to the raw key names (do not include the "$" characters), of any UI keys that you wish to html-escape before substituting into the HTML.   


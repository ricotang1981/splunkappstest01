# Copyright (C) 2010-2018 Sideview LLC.  All Rights Reserved.

[module]
className = Splunk.Module.ArrayValueSetter
superClass = Splunk.Module

description = Takes an array from upstream.  Has the ability to turn this array into a complex boolean search expression or into an argument list for a search command, and things like that. Make sure to read all of the pages of documentation and working examples within Sideview Utils app for all of the key details.  There is a page in the app dedicated to this particular module, containing documentation and working examples. 

[param:name]
required = True
label = Enter the context key name you want to output.  In other words, the context key at which the outputted string will be available for downstream modules.

[param:array]
required = True
label = enter the name (including the leading and trailing "$" characters) of the array-valued context key that you wish to convert to a string.  

[param:template]
required = False
label = this determines the inner template within which each of the array values will get wrapped.  For example if this has a value of userName="$value$", then each of the values foo,bar,baz,  would become userName="foo", userName="bar", userName="baz"

[param:separator]
required = True
label = this string is used to glue together the N templated values. Note that because of a bug in Splunk where leading and trailing space is trimmed from param values, you have to type "+" if you want leading or trailing spaces in the value.  Commonly, this is set to "+OR+".

[param:outerTemplate]
required = False
default = $value$
label = After the module has templated all the N values according to the template param, and glued them together using the 'separator' param, this template is used to wrap the combined value in other text.  In this case $value$ is used to refer to the conglomerate value, ie the multiple values that have been glued together by the separator param. Commonly, this is set to "( $value$ )". See comments under the 'separator' param about leading/trailing whitespace and the use of the "+" character.

[param:ignoreEmptyValues]
required = False
default = True
values = True,False
label = Deprecated - see 'nullTemplate'.   By default (True), empty or emptystring values in the incoming array will be quietly ignored.  If set to False, then the empty or emptystring values will be treated as emptystring values and processed.   With ignoreEmptyValues set to False you are more likely to end up with malformed syntax unless the template and separators are constructed with this situation in mind. 

[param:nullTemplate]
required = False
label = If set, then the module will ignore ignoreEmptyValues param, no matter what it is set to.  This completely supercedes the deprecated "ignoreEmptyValues" key (which would simply ignore null values).  When this is set, null or emptystring values will be washed through this template instead of the normal "template" string.  

[param:customBehavior]
required = False
label = You can define custom behaviors by using Sideview.utils.declareCustomBehavior(behaviorName, callback). See the general comments about what this all means in the CustomBehavior module.

[param:trimWhitespaceFromValues]
required = False
default = True
values = True,False
label = You should almost always omit specifying this param.  The default is the correct setting 99% of the time.   What it does is that it trims extra space characters, tabs and carriage returns from the individual values.    Otherwise splitting a string on comma, when there is actually <comma><space>,  will end up with space characters in the values.    Set this to False only in advanced cases where you need to turn this behavior off.
